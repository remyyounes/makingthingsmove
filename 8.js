webpackJsonp([8],{

/***/ "./src/sections/oscillation2.md":
/***/ (function(module, exports) {

module.exports = "```code\n<P5Wrapper sketch={(p) => {\n  // parameters\n  const dimensions = { width: 400, height: 250 }\n  const center = p.createVector(\n    dimensions.width / 2,\n    dimensions.height / 2,\n  )\n  const size = { width: 20, height: 20 }\n  const radius = 100\n  let particle\n  let time = 0\n\n  p.setup = function () {\n    // setup canvas\n    p.createCanvas(dimensions.width, dimensions.height, p.P2D)\n\n    // setup particle\n    particle = new Particle({ size })\n  }\n\n  // update loop / physics\n  const update = () => {\n    const r = radius + radius  *  0.1 * Math.cos(time * 10)\n\n    // move in around of circle with a dynamic radius\n    particle.position.x = center.x + Math.cos(time) * r\n    particle.position.y = center.y + Math.sin(time) * r\n    time += 0.05\n  }\n\n  // draw loop / rendering\n  p.draw = function () {\n\n    // render particle\n    Art.ellipse(p, particle)\n\n    // update world\n    update()\n  }\n\n}} />\n\n```\n```code\n<Oscilation update={\n  (time, particle) => {\n    const radius = 100\n    const r = radius * Math.cos(time * 2)\n    particle.position.x = Math.cos(time) * r\n    particle.position.y = Math.sin(time) * r\n  }\n}/>\n```\n```code\n<Oscilation update={\n  (time, particle) => {\n    const radius = 100\n    const r = radius * Math.cos(time / 3)\n    particle.position.x = Math.cos(time) * r\n    particle.position.y = Math.sin(time) * r\n  }\n}/>\n```\n```code\n<Oscilation update={\n  (time, particle) => {\n    const radius = 100\n    const r = radius * Math.cos(time / 4)\n    particle.position.x = Math.cos(time) * r\n    particle.position.y = Math.sin(time) * r\n  }\n}/>\n```\n```code\n<Oscilation update={\n  (time, particle) => {\n    const radius = 100\n    const r = radius * Math.cos(time / 4)\n    particle.position.x = Math.cos(time) * r\n    particle.position.y = Math.sin(time/3) * r\n  }\n}/>\n```\n```code\n<Oscilation update={\n  (time, particle) => {\n    const r = 100\n    particle.position.x = Math.cos(time) * r\n    particle.position.y = Math.sin(time/4) * r\n  }\n}/>\n```\n```code\n<Oscilation update={\n  (time, particle) => {\n    const radius = 100\n    const r = radius *  Math.cos(time / 20)\n    particle.position.x = Math.cos(time) * r\n    particle.position.y = Math.sin(time) * r\n  }\n}/>\n```\n"

/***/ })

});
//# sourceMappingURL=8.js.map