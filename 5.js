webpackJsonp([5],{

/***/ "./src/sections/particle.md":
/***/ (function(module, exports) {

module.exports = "# Particle Physics\nIn order to get started with some physics, let's introduce a simple `Particle` that will hold the necessary data for each of our particles.\n\n```js\nclass Particle {\n  constructor(props = {}) {\n    this.acceleration = props.acceleration || new p5.Vector(0, 0)\n    this.mass = props.mass || 1\n    this.position = props.position || new p5.Vector(0, 0)\n    this.size = props.size || { width: 10, height: 10 }\n    this.velocity = props.velocity || new p5.Vector(0, 0)\n    this.friction = props.friction || 1\n  }\n  applyForce(force) {\n    var f = p5.Vector.div(force, this.mass)\n    this.acceleration.add(f)\n  }\n\n  update() {\n    this.velocity.add(this.acceleration)\n    this.velocity.mult(this.friction)\n    this.position.add(this.velocity)\n    this.acceleration.mult(0)\n  }\n}\n```\nWith `Particle` we can:\n- `applyForce` on it in order to change its acceleration\n- `update` its position and reset its acceleration\n\n```js\nparticle.applyForce(new Vector(0.02, 0.04))\nparticle.update()\n```\n\n```code\n\nclass MovingParticle extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      particle: new Particle({\n        position: new Vector(100, 100),\n        /* velocity: new Vector(1, 1), */\n        size: { width: 30, height: 30 },\n      }),\n      dimensions: { width: 400, height: 200}\n    }\n  }\n\n  checkBounds(bounds, particle) {\n    const collision = { x: 0, y: 0 }\n    const xMin = particle.position.x - particle.size.width / 2\n    const xMax = particle.position.x + particle.size.width / 2\n    const yMin = particle.position.y - particle.size.height / 2\n    const yMax = particle.position.y + particle.size.height / 2\n    const radius = particle.size.width / 2\n\n    if (xMin <= 0 || xMax >= bounds.width) {\n      particle.velocity.x *= -.9\n      particle.position.x = (xMin < 0) ? radius : bounds.width - radius\n    }\n\n    if (yMin <= 0 || yMax >= bounds.height) {\n      particle.velocity.y *= -.9\n      debugger;\n      particle.position.y = (yMin < 0) ? radius : bounds.height - radius\n    }\n  }\n\n  tick() {\n    const { dimensions, particle } = this.state\n\n    // apply force\n    particle.applyForce(new Vector(0.02, 0.04))\n\n    // check collision\n    this.checkBounds(dimensions, particle)\n\n    // adjust position according to velocity\n    particle.update()\n  }\n\n  render() {\n    const { dimensions, particle } = this.state;\n    return (\n      <Canvas\n        dimensions={dimensions}\n        fps={60}\n        draw={(canvas => {\n          const ctx = canvas.getContext('2d')\n          ctx.clearRect(0, 0, dimensions.width, dimensions.height)\n\n          ctx.beginPath()\n          ctx.ellipse(\n            particle.position.x,\n            particle.position.y,\n            particle.size.width / 2,\n            particle.size.height / 2,\n            0,\n            0,\n            2 * Math.PI\n          )\n          ctx.stroke()\n\n          this.tick();\n        })}\n      />\n    )\n  }\n};\n\n```\n"

/***/ })

});
//# sourceMappingURL=5.js.map