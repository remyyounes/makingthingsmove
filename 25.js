webpackJsonp([25],{

/***/ "./src/sections/flock-boid.md":
/***/ (function(module, exports) {

module.exports = "# Boids\n\n## Let's get started!\n\nConstitution of a Boid:\n\n* acceleration\n* position\n* velocity\n* maxVelocity\n* maxForce\n* direction\n* separation: { force, radius }\n* alignment: { force, radius }\n* cohesion: { force, radius }\n\n## Extending Particle\n\nWe already have a `Particle` class that handles the motion mechanics.\nLet's create a Boid class that extends Particle to add `separation`, `alignment`, and `separation`.\n\nWe can derive direction from the velocity vector's `.heading()` method.\n\n```js\nparticle.velocity.heading()\n```\nAs it turns out, we won't need it.\n\nFinally, let's add `maxVelocity` and `maxForce` to the `Particle` class\n\n```js\n// Particle.js\nupdate() {\n  this.velocity.add(this.acceleration).limit(this.maxVelocity)\n  // ...\n}\n```\n\n```js\n// Boid.js\nclass Boid extends Particle {\n  constructor(props) {\n    super(props)\n    this.separation = props.separation\n    this.alignment = props.alignment\n    this.cohesion = props.cohesion\n  }\n}\n```\n\n## Rendering our Boid\n\nLet's extend our Art utility to draw a basic boid\n\n```js\n// Art.js\nconst boid = ctx => particle => {\n  // enter a new drawing context to rotate the drawing frame\n  ctx.push()\n  // move crosshair on top of particle.position\n  ctx.translate(particle.position.x, particle.position.y)\n  // rotate triangle to point to the direction of velocity\n  ctx.rotate(particle.velocity.heading() + Math.PI / 2)\n  // draw an upright triangle\n  ctx.triangle(\n    0,\n    -particle.size.height / 2,\n    -particle.size.width / 2,\n    particle.size.height / 2,\n    particle.size.width / 2,\n    particle.size.height / 2\n  )\n  // reset the drawing context to its original state\n  ctx.pop()\n}\n```\n\n## Example\n\nInsert 100 Boids of varying velocities at the middle of the canvas\n\n```code\n<P5Wrapper\n  sketch={p => {\n    // parameters\n    const dimensions = p.createVector(400, 400)\n    const center = dimensions.copy().div(2)\n    let flock = []\n    const flockCfg = {\n      count: 100,\n      size: { width: 10, height: 20 },\n    }\n\n    const createBoid = ({\n      position = center.copy(),\n      size = flockCfg.size,\n      maxVelocity = 0.1,\n      velocity = p.createVector(\n        p.random(-1, 1),\n        p.random(-1, 1)\n      ).mult(maxVelocity),\n    } = {}) => new Boid({\n      size,\n      position,\n      velocity,\n      maxVelocity,\n     })\n\n    const renderBoid = Art.boid(p)\n\n    p.setup = function() {\n      // setup canvas\n      p.createCanvas(dimensions.x, dimensions.y, p.P2D)\n\n      // init boids\n      flock = R.times(() => createBoid({ maxVelocity: 10}), flockCfg.count)\n    }\n\n    // update loop / physics\n    const update = () => {\n      flock.map( boid => boid.update() )\n    }\n\n    // draw loop / rendering\n    p.draw = function() {\n      // render background\n      p.background(p.color('white'))\n      flock.map(renderBoid)\n      update()\n    }\n  }}\n/>\n```\n"

/***/ })

});
//# sourceMappingURL=25.js.map