{"version":3,"file":"11.js","sources":["webpack:///./src/sections/motion.md"],"sourcesContent":["module.exports = \"# Moving in space\\n\\n## Ticking / State\\nNow that we know how to draw basic shapes we can start animating them.\\nFirst we'll need to find a place outside of the render loop for all this state management to take place.\\n\\nWe can create a tick() function to host our world's interactions\\n```js\\ntick() {\\n  // update velocity\\n  // update position\\n}\\n```\\nWe'll then call tick after every render\\n```js\\ndraw = function() {\\n  // ...\\n  ctx.beginPath()\\n  ctx.rect(0, 0, 10, 10)\\n  ctx.stroke()\\n  // ...\\n  tick()\\n}\\n```\\n\\n## Time delta\\nFor smoother and more linear rendering we should be passing `dt` to our tick function.\\n(cheat by lag)\\n\\n## Velocity\\nEach of our dynamic objects will have a velocity vector that we'll use to compute its next position\\n\\nWe just add the velocity vector to the position vector to get our new position\\n```js\\nposition = {\\n  x: position.x + velocity.x,\\n  y: position.y + velocity.y,\\n}\\n```\\n\\n## Wall bouncing\\nTo simulate bouncing we'll just flip the appropriate velocity axis when we hit a wall\\n\\n```js\\nif (position.x > dimensions.width || position.x < 0) {\\n  velocity = { ...velocity, x: -velocity.x }\\n} else if (position.y > dimensions.height || position.y < 0) {\\n  velocity = { ...velocity, y: -velocity.y }\\n}\\n```\\n\\n\\n```code\\nclass CanvasExample extends React.Component {\\n\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      dimensions: { width: 500, height: 200 },\\n      size: { width: 100, height: 100 },\\n      position: { x: 10, y: 5 },\\n      velocity: { x: 4, y: -1 }\\n    }\\n  }\\n\\n  tick() {\\n    const { dimensions, position, size, velocity } = this.state\\n    const state = { velocity, position }\\n\\n    if (position.x > dimensions.width || position.x < 0) {\\n      state.velocity = { ...velocity, x: -velocity.x }\\n    } else if (position.y > dimensions.height || position.y < 0) {\\n      state.velocity = { ...velocity, y: -velocity.y }\\n    }\\n\\n    state.position = {\\n      x: position.x + state.velocity.x,\\n      y: position.y + state.velocity.y,\\n    }\\n    this.setState(state)\\n  }\\n\\n  render() {\\n    const { dimensions, position, size } = this.state;\\n    return (\\n      <Canvas\\n        dimensions={dimensions}\\n        fps={60}\\n        draw={(canvas => {\\n          const ctx = canvas.getContext('2d')\\n          ctx.clearRect(0,0, dimensions.width, dimensions.height)\\n\\n          ctx.beginPath()\\n          ctx.ellipse(position.x, position.y, size.width / 2, size.height / 2, 0, 0, 2 * Math.PI)\\n          ctx.stroke()\\n\\n          this.tick();\\n        })}\\n      />\\n    )\\n  }\\n};\\n\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sections/motion.md\n// module id = ./src/sections/motion.md\n// module chunks = 11"],"mappings":";;;;;AAAA;;;;A","sourceRoot":""}